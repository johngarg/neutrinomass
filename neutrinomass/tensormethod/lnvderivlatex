#!/usr/bin/env python3

"""Script to output derivative operators as pickled file. Prints latex form of
operators as well.

"""

import pickle
from pprint import pprint
from collections import defaultdict

from neutrinomass.completions.core import EffectiveOperator
from neutrinomass.tensormethod.deriv_operators import (
    label_operators,
    longest_deriv_invariants,
    deriv_operator_names,
)

# write out data as pickled dictionary of string label to Operator
SAVE_DATA = False
TRACK_TOPO_TYPES = False

counter = 1
topology_types = defaultdict(list)
out_dict = {}
operator_dict_items = label_operators(
    longest_deriv_invariants(deriv_operator_names)
).items()
for name, op in operator_dict_items:
    print(f"Invariants for operator {counter}:")
    print(f"${name}$ & ${op.latex(ignore=['c', 'u', 'd'])}$ \\\\")

    if TRACK_TOPO_TYPES:
        EFF_OP = EffectiveOperator(name, op)
        type_ = (
            f"{EFF_OP.topology_type['n_scalars']}s{EFF_OP.topology_type['n_fermions']}f"
        )
        print(type_)
        topology_types[type_].append(name)

    if SAVE_DATA:
        out_dict["D" + name] = op.pickle_form()

    print("\n")
    counter += 1

pprint(topology_types)
if SAVE_DATA:
    # pickle data
    FILENAME = "deriv_operators.p"
    with open(FILENAME, "wb+") as out:
        pickle.dump(out_dict, out)
